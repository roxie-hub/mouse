<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>學科獸出沒！</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@400;700&display=swap');
        body {
            font-family: 'Noto Sans TC', sans-serif;
            touch-action: manipulation; /* Disable double-tap to zoom on mobile */
        }
        .hole {
            width: 120px;
            height: 120px;
            background-color: #a56a42;
            border-radius: 50%;
            border: 10px solid #7c4d2f;
            position: relative;
            overflow: hidden;
            box-shadow: inset 0 10px 15px rgba(0,0,0,0.4);
            cursor: pointer;
        }
        .monster {
            position: absolute;
            bottom: -100%;
            left: 50%;
            transform: translateX(-50%);
            width: 100px;
            height: 100px;
            transition: bottom 0.2s ease-in-out;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: flex-end;
            user-select: none;
            pointer-events: none;
        }
        .monster.up {
            bottom: 0;
        }
        .monster-emoji {
            font-size: 60px;
            line-height: 1;
            filter: drop-shadow(0 4px 6px rgba(0,0,0,0.3));
        }
        .monster-name {
            background-color: rgba(0,0,0,0.6);
            color: white;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 14px;
            font-weight: bold;
            white-space: nowrap;
        }
        .hit {
            animation: hit-animation 0.3s ease-out;
        }
        @keyframes hit-animation {
            0% { transform: scale(1); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }
        .game-container {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 20px;
            max-width: 450px;
            margin: auto;
        }
        @media (max-width: 480px) {
            .hole {
                width: 100px;
                height: 100px;
            }
            .monster {
                width: 80px;
                height: 80px;
            }
            .monster-emoji {
                font-size: 50px;
            }
            .game-container {
                gap: 15px;
            }
        }
    </style>
</head>
<body class="bg-green-100 flex flex-col items-center justify-center min-h-screen p-4">

    <div class="w-full max-w-md bg-white rounded-2xl shadow-lg p-6 text-center">
        <h1 class="text-3xl font-bold text-gray-800 mb-2">學科獸出沒！</h1>
        <p class="text-gray-600 mb-4">點擊怪物來擊敗他們！</p>

        <div class="flex justify-around items-center bg-gray-100 p-4 rounded-lg mb-6">
            <div>
                <span class="text-lg font-bold text-blue-600">分數</span>
                <p id="score" class="text-3xl font-bold">0</p>
            </div>
            <div>
                <span class="text-lg font-bold text-red-600">剩餘時間</span>
                <p id="time-left" class="text-3xl font-bold">30</p>
            </div>
        </div>

        <div id="game-board" class="game-container mb-6">
            <!-- Holes will be generated by JS -->
        </div>

        <button id="start-button" class="w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-4 rounded-lg text-xl transition duration-300 shadow-md">
            開始遊戲
        </button>
    </div>

    <script>
        // --- Game Elements ---
        const gameBoard = document.getElementById('game-board');
        const scoreDisplay = document.getElementById('score');
        const timeLeftDisplay = document.getElementById('time-left');
        const startButton = document.getElementById('start-button');
        
        // --- Game State ---
        let score = 0;
        let timeLeft = 30;
        let timerId = null;
        let monsterTimerId = null;
        let isGameRunning = false;
        let lastHole;

        // --- Monster Designs ---
        const monsters = [
            { name: '國文獸', emoji: '🐌' },
            { name: '英文獸', emoji: '🐝' },
            { name: '數學獸', emoji: '🗿' },
            { name: '生物獸', emoji: '🦠' },
            { name: '社會獸', emoji: '🐢' },
            { name: '理化獸', emoji: '⚗️' },
            { name: '地科獸', emoji: '☄️' },
            { name: '函數龍', emoji: '🐉' },
        ];

        // --- Game Setup ---
        function createGameBoard() {
            for (let i = 0; i < 9; i++) {
                const hole = document.createElement('div');
                hole.classList.add('hole');
                hole.dataset.id = i;
                
                const monster = document.createElement('div');
                monster.classList.add('monster');
                
                const emoji = document.createElement('div');
                emoji.classList.add('monster-emoji');
                
                const name = document.createElement('div');
                name.classList.add('monster-name');
                
                monster.appendChild(emoji);
                monster.appendChild(name);
                hole.appendChild(monster);

                hole.addEventListener('mousedown', hitMonster);
                hole.addEventListener('touchstart', hitMonster, { passive: true });

                gameBoard.appendChild(hole);
            }
        }

        // --- Game Logic ---
        function getRandomHole() {
            const holes = document.querySelectorAll('.hole');
            const index = Math.floor(Math.random() * holes.length);
            const hole = holes[index];
            if (hole === lastHole) {
                return getRandomHole();
            }
            lastHole = hole;
            return hole;
        }

        function popUpMonster() {
            const hole = getRandomHole();
            const monsterElement = hole.querySelector('.monster');
            const randomMonster = monsters[Math.floor(Math.random() * monsters.length)];
            
            monsterElement.querySelector('.monster-emoji').textContent = randomMonster.emoji;
            monsterElement.querySelector('.monster-name').textContent = randomMonster.name;
            
            monsterElement.classList.add('up');
            monsterElement.dataset.active = "true";

            setTimeout(() => {
                monsterElement.classList.remove('up');
                monsterElement.dataset.active = "false";
            }, Math.random() * 500 + 700); // Monster stays up for 0.7s to 1.2s
        }
        
        function hitMonster(e) {
            if (!isGameRunning) return;
            
            const hole = e.currentTarget;
            const monster = hole.querySelector('.monster');

            if (monster.dataset.active === "true") {
                score++;
                scoreDisplay.textContent = score;
                monster.dataset.active = "false"; // Prevent double scoring
                monster.classList.remove('up');
                
                // Visual feedback
                hole.classList.add('hit');
                setTimeout(() => hole.classList.remove('hit'), 300);
            }
        }

        function countdown() {
            timeLeft--;
            timeLeftDisplay.textContent = timeLeft;
            if (timeLeft === 0) {
                endGame();
            }
        }

        function startGame() {
            if (isGameRunning) return;
            isGameRunning = true;
            
            // Reset game state
            score = 0;
            timeLeft = 30;
            scoreDisplay.textContent = score;
            timeLeftDisplay.textContent = timeLeft;
            startButton.textContent = '遊戲進行中...';
            startButton.disabled = true;

            // Start timers
            timerId = setInterval(countdown, 1000);
            monsterTimerId = setInterval(popUpMonster, 800);
        }

        function endGame() {
            isGameRunning = false;
            clearInterval(timerId);
            clearInterval(monsterTimerId);
            
            // Clear any remaining monsters
            document.querySelectorAll('.monster').forEach(monster => {
                monster.classList.remove('up');
                monster.dataset.active = "false";
            });

            alert(`遊戲結束！\n你的分數是：${score}`);
            
            startButton.textContent = '重新開始';
            startButton.disabled = false;
        }

        // --- Event Listeners ---
        startButton.addEventListener('click', startGame);
        
        // --- Initial Load ---
        window.onload = createGameBoard;

    </script>
</body>
</html>
